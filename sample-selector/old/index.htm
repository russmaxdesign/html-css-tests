<!DOCTYPE html><html lang="en"><head>	<meta charset="utf-8">	<title>CSS selectors</title><style type="text/css">	body	{		margin: 0;		padding: 20px;		color: #000;		background: #fff;		font: 125%/1.1 helvetica, arial, sans-serif;	}		a { text-decoration: none; }	a:link { color: #333; }	a:visited { color: #333; }	a[href^="#group"] { background: -webkit-linear-gradient(#eee, #ccc); }		a:focus, a[href^="#group"]:focus	{		color: #fff;		background: #000;	}		a:hover, a[href^="#group"]:hover	{		color: #fff;		background: #000;	}		a:active, a[href^="#group"]:active	{		color: #fff;		background: rgb(150,0,0);	}		p	{		margin: 0 0 1em;		line-height: 1.3;	}		h1, h2, h3, h4, h5, h6 { line-height: 1.1; }		h1	{		font-size: 26px;		margin: 3em 0 0;		border-top: 1px solid #ccc;		padding: .5em 0;	}		h2	{		font-size: 20px;		margin: 1em 0 .5em;	}		h3	{		font-size: 14px;		width: 3.5em;		text-align: center;		color: #fff;		background: #999;		border-radius: 4px 4px 0 0;		margin: 0;		padding: .4em .5em .3em;		font-weight: normal;	}		pre	{		display: block;		overflow: auto;		background: #fff;		border: 1px solid #aaa;		margin: 0 0 1em;		padding: .5em;		box-shadow: 5px 5px 5px #eee;		border-radius: 0 4px 4px 4px;		text-align: left;		font: 19px/1.1 "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;	}		pre strong { color: rgb(200,0,0); }		blockquote	{		margin: 1em 0;		padding: 1em;		background: #eee;	}		.container { width: 280px; }	.index, { font-size: 90%; }		.index, .index ul	{		margin: 0;		padding: 0;	}		.index li { display: inline; }		.index a	{		display: block;		padding: .5em;		border-bottom: 1px solid #bbb;	}		.special	{		margin: 0 0 .5em;		border: none;		padding: 0;		background: none;		font-size: 200%;	}		.css1 { color: rgb(155,0,0); }	.css2 { color: rgb(0,71,131); }	.css3 { color: rgb(65,105,0); }		.css1-bg, .css2-bg, .css3-bg	{		position: relative;		top: -.2em;		margin: 0 0 0 .5em;		border-radius: 5px;		padding: .2em .5em;		color: #fff;		font-size: 60%;	}		h1 .css1-bg, h1 .css2-bg, h1 .css3-bg	{		position: static;		top: 0;		margin: 0;	}		.css1-bg { background: rgb(155,0,0); }	.css2-bg { background: rgb(0,71,131); }	.css3-bg { background: rgb(65,105,0); }	.deleted { text-decoration: line-through; }</style> </head><body><div class="container">	<h1 class="special">		Selector index 	</h1>	<ul class="index">		<li><a href="#group01">Basic selectors</a> 		<ul>			<li><a href="#01">Type <span class="css1-bg">CSS1</span></a></li>			<li><a href="#02">Class <span class="css1-bg">CSS1</span></a></li>			<li><a href="#03">ID <span class="css1-bg">CSS1</span></a></li>			<li><a href="#04">Universal <span class="css2-bg">CSS2</span></a></li>		</ul>		</li>		<li><a href="#group02">Combinators</a> 		<ul>			<li><a href="#05">Descendant <span class="css1-bg">CSS1</span></a></li>			<li><a href="#06">Child <span class="css2-bg">CSS2</span></a></li>			<li><a href="#07">Adjacent sibling <span class="css2-bg">CSS2</span></a></li>			<li><a href="#08">General sibling <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>		<li><a href="#group03">Link pseudo-classes</a> 		<ul>			<li><a href="#09">:link <span class="css1-bg">CSS1</span></a></li>			<li><a href="#10">:visited <span class="css1-bg">CSS1</span></a></li>		</ul>		</li>		<li><a href="#group04">User-action pseudo-classes</a> 		<ul>			<li><a href="#11">:active <span class="css1-bg">CSS1</span></a></li>			<li><a href="#12">:focus <span class="css2-bg">CSS2</span></a></li>			<li><a href="#13">:hover <span class="css2-bg">CSS2</span></a></li>		</ul>		</li>		<li><a href="#group05">Lang pseudo-class</a> 		<ul>			<li><a href="#14">:lang(c) <span class="css2-bg">CSS2</span></a></li>		</ul>		</li>		<li><a href="#group06">Negation pseudo-class</a> 		<ul>			<li><a href="#15">:not <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>		<li><a href="#group07">Structural pseudo-classes</a> 		<ul>			<li><a href="#16">:first-child <span class="css2-bg">CSS2</span></a></li>			<li><a href="#17">:last-child <span class="css3-bg">CSS3</span></a></li>			<li><a href="#18">:only-child <span class="css3-bg">CSS3</span></a></li>			<li><a href="#19">:first-of-type <span class="css3-bg">CSS3</span></a></li>			<li><a href="#20">:last-of-type <span class="css3-bg">CSS3</span></a></li>			<li><a href="#21">:only-of-type <span class="css3-bg">CSS3</span></a></li>			<li><a href="#22">:nth-child(n) <span class="css3-bg">CSS3</span></a></li>			<li><a href="#23">:nth-last-child(n) <span class="css3-bg">CSS3</span></a></li>			<li><a href="#24">:nth-of-type(n) <span class="css3-bg">CSS3</span></a></li>			<li><a href="#25">:nth-last-of-type(n) <span class="css3-bg">CSS3</span></a></li>			<li><a href="#26">:root <span class="css3-bg">CSS3</span></a></li>			<li><a href="#27">:empty <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>		<li><a href="#group08">User-interface pseudo-classes</a> 		<ul>			<li><a href="#28">:disabled <span class="css3-bg">CSS3</span></a></li>			<li><a href="#29">:enabled <span class="css3-bg">CSS3</span></a></li>			<li><a href="#30">:checked <span class="css3-bg">CSS3</span></a></li>			<li><a href="#31">:intermediate <span class="css3-bg">CSS3</span></a></li>			<li><a href="#32">:default <span class="css3-bg">CSS3</span></a></li>			<li><a href="#33">:valid <span class="css3-bg">CSS3</span></a></li>			<li><a href="#34">:invalid <span class="css3-bg">CSS3</span></a></li>			<li><a href="#35">:in-range <span class="css3-bg">CSS3</span></a></li>			<li><a href="#36">:out-of-range <span class="css3-bg">CSS3</span></a></li>			<li><a href="#37">:required <span class="css3-bg">CSS3</span></a></li>			<li><a href="#38">:optional <span class="css3-bg">CSS3</span></a></li>			<li><a href="#39">:read-only <span class="css3-bg">CSS3</span></a></li>			<li><a href="#40">:read-write <span class="css3-bg">CSS3</span></a></li>			<li><a href="#41">:target <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>		<li><a href="#group09">Pseudo-elements</a> 		<ul>			<li><a href="#42">:first-line <span class="css1-bg">CSS1</span></a></li>			<li><a href="#43">:first-letter <span class="css1-bg">CSS1</span></a></li>			<li><a href="#44">:before <span class="css2-bg">CSS2</span></a></li>			<li><a href="#45">:after <span class="css2-bg">CSS2</span></a></li>			<li><a href="#46">::selection <span class="css3-bg">CSS3</span></a></li>			<li><a href="#47">::value <span class="css3-bg">CSS3</span></a></li>			<li><a href="#48">::choices <span class="css3-bg">CSS3</span></a></li>			<li><a href="#49">::repeat-item <span class="css3-bg">CSS3</span></a></li>			<li><a href="#50">::repeat-index <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>		<li><a href="#group10">Attribute selectors</a> 		<ul>			<li><a href="#51">[att] <span class="css2-bg">CSS2</span></a></li>			<li><a href="#52">[att=val] <span class="css2-bg">CSS2</span></a></li>			<li><a href="#53">[att~=val] <span class="css2-bg">CSS2</span></a></li>			<li><a href="#54">[att|=val] <span class="css2-bg">CSS2</span></a></li>			<li><a href="#55">[att^=val] <span class="css3-bg">CSS3</span></a></li>			<li><a href="#56">[att$=val] <span class="css3-bg">CSS3</span></a></li>			<li><a href="#57">[att*=val] <span class="css3-bg">CSS3</span></a></li>		</ul>		</li>	</ul><!-- new group-->	<h1 id="group01">		Group 1 - Basic selectors 	</h1>	<p>		Basic selectors allow you to target basic HTML elements, as well as elements that contain classes and IDs. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a</strong> { }<strong>.intro</strong> {}<strong>#nav</strong> {}<strong>*</strong> {}</code></pre> <!-- new selector-->	<h1 class="css1" id="01">		Type<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The type selector is written using an element type. 	</p>	<h3>		CSS 	</h3><pre><code><strong>h1</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The type selector targets every instance of the element type regardless of their position in the document tree. 	</p>	<p>		In the example below, the "a" selector targets any instance of the &lt;a&gt; element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;a href="#"&gt;Link&lt;/a&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The type selector is well supported across all modern browsers. 	</p><!-- new selector-->	<h1 class="css1" id="02">		Class<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The class selector is written an optional element, followed by a ".", followed by the class name. Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>.intro</strong> { }<strong>p.intro</strong> { }</code></pre> 	<p>		Class values are case-sensitive. In the example below, browsers interpret ".intro" and ".Intro" as different classes. 	</p>	<h3>		CSS 	</h3><pre><code><strong>.Intro</strong> { }<strong>.intro</strong> { }</code></pre> 	<p>		Classes can begin with letters, digits, hyphens, underscores. They can also include colons and periods. 	</p>	<h3>		CSS 	</h3><pre><code><strong>.480wide</strong> { }<strong>._classname</strong> { }<strong>.-classname</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The class selector targets any HTML element that has the relevant class value regardless of their position in the document tree. 	</p>	<p>		In the example below, the ".intro" selector targets any instance of the an element that contains a class of "intro". 	</p>	<h3>		CSS 	</h3><pre><code><strong>.intro</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="<strong>intro</strong>"&gt;   Content&lt;/p&gt;&lt;div class="<strong>intro</strong>"&gt;   Content&lt;/div&gt;</code></pre> 	<h2>		Making classes more specific 	</h2>	<p>		Elements can be added before the "." to make a selector more specific. In the example below, the ".intro" selector targets the &lt;p&gt; and &lt;div&gt; elements as they both contain a class of "intro". 	</p>	<p>		In the example below, the "p.intro" selector targets only &lt;p&gt; elements that contain a class of "intro". The &lt;div&gt; is not targeted. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p.intro</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="<strong>intro</strong>"&gt;   Content&lt;/p&gt;&lt;div class="intro"&gt;   Content&lt;/div&gt;</code></pre> 	<h2>		Multiple classes 	</h2>	<p>		Multiple classes can be added together to make a selector more specific. They must be written with an optional element, followed by a ".", followed by a class name, followed by another ".", followed by another class name. 	</p>	<h3>		CSS 	</h3><pre><code><strong>.one.two</strong> { }<strong>p.one.two</strong> { }</code></pre> 	<p>		In the example below, the ".one.two" selector targets any element that has a class of both "one" and "two". 	</p>	<h3>		CSS 	</h3><pre><code>.one { }.two { }<strong><strong>.one.two</strong></strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="one"&gt;   Content&lt;/p&gt;&lt;div class="two"&gt;   Content&lt;/div&gt;&lt;div class="<strong>one two</strong>"&gt;   Content&lt;/div&gt;</code></pre> 	<p>		Multiple class values can be written in any order. The selector ".one.two" is the same as ".two.one". 	</p>	<h3>		CSS 	</h3><pre><code><strong>.two.one</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div class="<strong>one two</strong>"&gt;   Content&lt;/div&gt;</code></pre> 	<p>		The class attribute values within the HTML document can also be written in any order. The attribute values "one two" are the same as "two one". 	</p>	<h3>		HTML 	</h3><pre><code>&lt;div class="<strong>one two</strong>"&gt;   Content&lt;/div&gt;&lt;div class="<strong>two one</strong>"&gt;   Content&lt;/div&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The class selector is well supported across all modern browsers. 	</p><!-- new selector-->	<h1 class="css1" id="03">		ID<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The ID selector is written using a "#", followed by the ID name. Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>#nav </strong>{ }</code></pre> 	<p>		ID names are case-sensitive. Browsers will interpret "#nav" and "#Nav" as different IDs. 	</p>	<h3>		CSS 	</h3><pre><code><strong>#nav</strong> { }<strong>#Nav</strong> { }</code></pre> 	<p>		Before HTML5, ID names had to begin with a letter. ID names are now allowed to have any characters or strings, as long as it is unique, is not the empty string, 
and does not contain whitespace characters. 	</p>	<h3>		CSS 	</h3><pre><code><strong>#480wide</strong> { }<strong>#_classname</strong> { }<strong>#-classname</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The ID selector targets any HTML element that has the relevant ID value regardless of its position in the document tree. 	</p>	<p>		In the example below, the "#nav" selector targets any instance of the an element that contains a class of "nav". 	</p>	<h3>		CSS 	</h3><pre><code><strong>#nav</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p id="<strong>nav</strong>"&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The ID selector is well supported across all modern browsers. 	</p><!-- new selector-->	<h1 class="css2" id="04">		Universal<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The universal selector is written using a "*". 	</p>	<h3>		CSS 	</h3><pre><code><strong>*</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The universal selector targets any elements within the document. 	</p>	<p>		In the example below, the selector targets every element in the document. 	</p>	<h3>		CSS 	</h3><pre><code><strong>*</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;body&gt;   &lt;div"&gt;      Content   &lt;/div&gt;&lt;/body&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The universal selector is well supported across all modern browsers. 	</p><!-- new group-->	<h1 id="group02">		Group 2 - Combinators 	</h1>	<p>		"Combinators" allow you to combine basic selectors into new types of selectors. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p a</strong> { }<strong>p > a</strong> { }<strong>h2 + h3</strong> { }<strong>ul ~ p</strong> { }</code></pre> <!-- new selector-->	<h1 class="css1" id="05">		Descendant<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The descendant selector is written using two or more selectors separated by whitespace. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p a</strong> { }<strong>div .intro</strong> { }<strong>#nav li a</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The descendant selector targets only elements that are descendants of other elements. 	</p>	<p>		In the example below, the &lt;a&gt; element that is a descendant of the &lt;p&gt; will be selected, but not the &lt;a&gt; element that is a descendant of the &lt;div&gt; element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p a</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;&lt;div&gt;   &lt;a href="#"&gt;link&lt;/a&gt;&lt;/div&gt;</code></pre> 	<h2>		Descendant selector paths 	</h2>	<p>		The key to descendant selectors is understanding pathways to elements. There is a path to every element starting with the HTML element. 	</p>	<p>		Paths can be written in full or in part, depending on your need. Paths can also skip one or more levels. 	</p>	<h3>		CSS 	</h3><pre><code>html body ul li <strong>a</strong> { }body ul li <strong>a</strong> { }ul li <strong>a</strong> { }li <strong>a</strong> { }<strong>a</strong> { }</code></pre> 	<p>		Try to keep your selectors as short as possible. Each selector should only be as specific as needed. 	</p>	<h3>		CSS 	</h3><pre><code><strong>.nav</strong> {}<strong>.nav li</strong> { }<strong>.nav a</strong> { }</code></pre> 	<h2>		Support 	</h2>	<p>		The descendant selector is well supported across all modern browsers. 	</p><!-- new selector-->	<h1 class="css2" id="06">		Child<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The child selector is written using two selectors separated by a "&gt;". Whitespace within the selector is optional. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p > a</strong> { }<strong>p>a</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The child selector targets any element that is a direct child of 
another element. Only child elements, rather than descendant elements, will be selected. 	</p>	<p>		In the example below, the &lt;a&gt; that is a child of the &lt;div&gt; will be selected, but not the &lt;a&gt; that is a child of the &lt;p&gt;. 	</p>	<h3>		CSS 	</h3><pre><code><strong>div > a</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong> &lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/div&gt;&lt;div&gt;   &lt;p&gt;     &lt;a href="#"&gt;link&lt;/a&gt;   &lt;/p&gt;&lt;/div&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The child selector is not supported by IE6. 	</p><!-- new selector-->	<h1 class="css2" id="07">		Adjacent sibling<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The adjacent sibling selector is written using two selectors separated by a "+". Whitespace within the selector is optional. 	</p>	<h3>		CSS 	</h3><pre><code><strong>h2 + h3</strong> { }<strong>h2+h3</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The Adjacent sibling selector targets the sibling (element that shares the same parent) immediately following a defined element. 	</p>	<p>		In the example below, only the &lt;h3&gt; that is adjacent to the &lt;h2&gt; will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>h2 + h3</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;h2&gt;   Content&lt;/h2&gt;<strong>&lt;h3&gt;   Content&lt;/h3&gt;</strong>&lt;h3&gt;   Content&lt;/h3&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The adjacent sibling selectors is not supported by IE6. 	</p><!-- new selector-->	<h1 class="css3" id="08">		General sibling<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The general sibling selector is written using two selectors separated by a "~". Whitespace within the selector is optional. 	</p>	<h3>		CSS 	</h3><pre><code><strong>h2 ~ h3</strong> { }<strong>h2~h3</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The General sibling selector targets any sibling (element that shares the same parent) that follows a defined element. 	</p>	<p>		In the example below, any &lt;h3&gt; after the &lt;h2&gt; will be 
selected - as long as they share the same parent. 	</p>	<h3>		CSS 	</h3><pre><code><strong>h2 ~ h3</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;h2&gt;   Content&lt;/h2&gt;<strong>&lt;h3&gt;   Content&lt;/h3&gt;</strong>&lt;p&gt;   Content&lt;/p&gt;<strong>&lt;h3&gt;   Content&lt;/h3&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The general sibling selector is not supported by IE6 or IE7. 	</p><!-- new group-->	<h1 id="group03">		Group 3 - Link pseudo-classes 	</h1>	<p>		Pseudo-classes (or "fake" classes) allow you to style specific attributes or states that do not exist in the document tree. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:link</strong> { }<strong>a:visited</strong> { }</code></pre> <!-- new selector-->	<h1 class="css1" id="09">		:link<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :link pseudo-class selector is written using an &lt;a&gt; element, followed by ":", followed by "link". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:link</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :link pseudo-class selector targets any link that is defined as "unvisited". 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:link</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :link pseudo-class selector is well supported across all modern browsers. 	</p><!-- new selector-->	<h1 class="css1" id="10">		:visited<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :visited pseudo-class selector is written using an &lt;a&gt; element, followed by ":", followed by "visited". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:visited</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :visited pseudo-class selector targets any link that is defined as "visited". 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:visited</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :visited pseudo-class selector is well supported across all modern browsers. 	</p><!-- new group-->	<h1 id="group04">		Group 4 - User-action pseudo-classes 	</h1>	<p>		The user-action pseudo-classes allow you to style elements based on the way that users interact with these elements. 	</p><pre><code><strong>a:active</strong> { }<strong>a:focus</strong> { }<strong>a:hover</strong> { }</code></pre> <!-- new selector-->	<h1 class="css1" id="11">		:active<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :active pseudo-class selector is written using an &lt;a&gt; element, followed by ":", followed by "active". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:active</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :active pseudo-class selector targets any element that is currently 
being activated by the user. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:active</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		Issue 1: IE6 and IE7 only support :active on elements with the HREF attribute. 	</p>	<p>		Issue 2: IE6 incorrectly applies this pseudo-class to links that have input focus (incorrectly applies :active for :focus). 	</p>	<p>		Issue 3: IE6 has a "sticky active state" (active state remains active when user returns to page via the back button). 	</p><!-- new selector-->	<h1 class="css2" id="12">		:focus<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :focus pseudo-class selector is written using an element, followed by ":", followed by "focus". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:focus</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :focus pseudo-class selector targets elements that have focus (ones that accept keyboard events). 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:focus</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :focus pseudo-class selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css2" id="13">		:hover<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :hover pseudo-class selector is written using an element, followed by ":", followed by "hover". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:hover</strong> { }<strong>tr:hover</strong> { }<strong>div:hover</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :hover pseudo-class selector targets any element when the user’s cursor is over the element - but the user has not activated it. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a:hover</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;a href="#"&gt;link&lt;/a&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		IE6 only supports :hover on elements with the HREF attribute. 	</p><!-- new group-->	<h1 id="group05">		Group 5 - The lang pseudo-class 	</h1>	<p>		The :lang pseudo-class allows you to style content that has been defined using the "lang" attribute. 	</p><pre><code><strong>p:lang(fr)</strong> { }</code></pre> <!-- new selector-->	<h1 class="css2" id="14">		:lang(c)<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :lang(c) pseudo-class selector is written using an option element, followed by ":", followed by "lang", followed by a "language subtag" placed inside brackets. Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:lang(bs)</strong> { }<strong>p:lang(hu)</strong> { }</code></pre> 	<h2>		Language subtags 	</h2>	<p>		The language subtags are defined in the <a href="http://www.iana.org/assignments/language-subtag-registry">IANA Language Subtag Registry</a>. 	</p>	<h2>		How does it work? 	</h2>	<p>		The :lang(c) pseudo-class selector targets any element that contains the "lang" attribute and the relevant language subtag value. 	</p>	<p>		In the example below, only the &lt;p&gt; element with the (fr) lang subtag will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:lang(fr)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p <strong>lang="fr"</strong>&gt;   Adieu&lt;/p&gt;&lt;p lang="jw"&gt;   Sugeng rawuh&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :lang(c) pseudo-class selector is not supported in IE6, IE7 or IE8. 	</p><!-- new group-->	<h1 id="group06">		Group 6 - The negation pseudo-class 	</h1>	<p>		The :not pseudo-class allows you to style every element except the element that has been defined using the selector. 	</p><pre><code><strong>p:not(.intro)</strong> { }</code></pre> <!-- new selector-->	<h1 class="css3" id="15">		:not<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :not pseudo-class selector is written using an element, followed by ":not", followed by a simple selector placed inside brackets. Whitespace is not permitted within the selector. Simple selectors only are allowed inside the brackets. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:not(.intro)</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :not pseudo-class selector targets all elements except those defined by the selector. The :not selector can be defined using a variety of simple selectors. 	</p>	<p>		<strong>Option 1</strong>: Type selectors are allowed inside the brackets. In the example below, every element that is not a &lt;p&gt; element will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:not(p)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   Content&lt;/p&gt;<strong>&lt;div&gt;   Content&lt;/div&gt;&lt;blockquote&gt;   Content&lt;/blockquot&gt;</strong></code></pre> 	<p>		<strong>Option 2</strong>: Class selectors are allowed inside the brackets. In the example below, every element that does not have a class of "intro" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:not(.intro)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="intro"&gt;   Content&lt;/p&gt;<strong>&lt;p&gt;   Content&lt;/p&gt;&lt;div&gt;   Content&lt;/div&gt;</strong></code></pre> 	<p>		<strong>Option 3</strong>: ID selectors are allowed inside the brackets. In the example below, every element that does not have an ID of "news" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:not(#news)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p id="news"&gt;   Content&lt;/p&gt;<strong>&lt;p&gt;   Content&lt;/p&gt;&lt;div&gt;   Content&lt;/div&gt;</strong></code></pre> 	<p>		<strong>Option 4</strong>: Pseudo-class selectors are allowed inside the brackets. In the example below, every element that does not have a pseudo-class of "lang(fr)" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:not(:lang(fr))</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p lang="fr"&gt;   Content&lt;/p&gt;<strong>&lt;p lang="br"&gt;   Content&lt;/p&gt;&lt;p&gt;   Content&lt;/p&gt;</strong></code></pre> 	<p>		<strong>Option 5</strong>: Attribute selectors are allowed inside the brackets. In the example below, every element that does not have an "disabled" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:not([disabled])</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input disabled&gt;<strong>&lt;input&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :not pseudo-class selector is not supported in IE6, IE7 or IE8. 	</p><!-- new group-->	<h1 id="group07">		Group 7 - Structural pseudo-classes 	</h1>	<p>		Structural pseudo-classes allow you to select elements based on their position within the overall document structure. 	</p><pre><code><strong>:first-child</strong> { }<strong>:only-child</strong> { }<strong>:nth-child(3n)</strong> { }</code></pre> 	<h2>		Unstable 	</h2>	<p>		Be aware that many of these structural pseudo-classes are considered "unstable". If the document structure changes, the structural pseudo-selector may be applied to a different element, or no element at all. 	</p>	<h2>		Confusion 	</h2>	<p>		It is very easy to get confused when styling structural selectors as to which element is actually being styled. 	</p>	<p>		In the example below, the &lt;p&gt; element that is an only child is being styled, NOT the only child of the &lt;p&gt; element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:only-child</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;      Content   &lt;/p&gt;</strong>&lt;/div&gt;&lt;div&gt;   &lt;p&gt;      Content   &lt;/p&gt;   &lt;p&gt;      Content   &lt;/p&gt;&lt;/div&gt;</code></pre> <!-- new selector-->	<h1 class="css2" id="16">		:first-child<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :first-child pseudo-class selector is written using an element followed by ":", followed by "first-child". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>em:first-child</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :first-child pseudo-class selector targets elements that are the first child of some other element. 	</p>	<p>		In the example below, the first &lt;em&gt; element will be selected but not the second. 	</p>	<h3>		CSS 	</h3><pre><code><strong>em:first-child</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;em&gt;1&lt;/em&gt;</strong> &lt;em&gt;2&lt;/em&gt;&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :first-child selector is not supported in IE6. IE7 has buggy support. 	</p><!-- new selector-->	<h1 class="css3" id="17">		:last-child<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax	</h2>	<p>		The :last-child pseudo-class selector is written using an element followed by ":", followed by "last-child". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>em:last-child</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :last-child pseudo-class selector targets elements that are the last child of some other element. 	</p>	<p>		In the example below, the last &lt;em&gt; element will be selected but not the first. 	</p>	<h3>		CSS 	</h3><pre><code><strong>em:last-child</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   &lt;em&gt;1&lt;/em&gt; <strong>&lt;em&gt;2&lt;/em&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :last-child pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="18">		:only-child<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :only-child pseudo-class selector is written using an element followed by ":", followed by "only-child". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:only-child</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :only-child pseudo-class selector targets elements that are the only child of some other element. 	</p>	<p>		In the example below, any &lt;em&gt; that is an only child will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>em:only-child</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>&lt;em&gt;1&lt;/em&gt;</strong>&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :only-child pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="19">		:first-of-type<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :first-of-type pseudo-class selector is written using an element followed by ":", followed by "first-of-type". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:first-of-type</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :first-of-type pseudo-class selector targets elements that are the first of its type within a parent. 	</p>	<p>		In the example below, only the first &lt;p&gt; element will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:first-of-type</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;p&gt;   Content&lt;/p&gt;</strong>&lt;p&gt;   Content&lt;/p&gt;&lt;p&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :first-of-type pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="20">		:last-of-type<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :last-of-type pseudo-class selector is written using an element followed by ":", followed by "last-of-type". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:last-of-type</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :last-of-type pseudo-class selector targets elements that are the last of its type within a parent. 	</p>	<p>		In the example below, only the last &lt;p&gt; element will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:last-of-type</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   Content&lt;/p&gt;&lt;p&gt;   Content&lt;/p&gt;<strong>&lt;p&gt;   Content&lt;/p&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :last-of-type pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="21">		:only-of-type<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :only-of-type pseudo-class selector is written using an element followed by ":", followed by "onlyof-type". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:only-of-type</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :only-of-type pseudo-class selector targets elements that are the only element of that type within the parent. 	</p>	<p>		In the example below, the &lt;p&gt; that is the only element of its type within a parent be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:only-of-type</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;      Content   &lt;/p&gt;</strong>   &lt;div&gt;      Content   &lt;/div&gt;&lt;/div&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :only-of-type pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="22">		:nth-child(n)<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :nth-child pseudo-class selector is written using an element followed by ":", followed by "nth-child", followed by brackets. The brackets can contain six different types of values. Whitespace is not permitted within the selector. 	</p><pre><code><strong>li:nth-child(3)</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :nth-child pseudo-class selector targets specific child elements within the parent. The six different types of values used inside the brackets dictate which child elements will be targeted. 	</p>	<p>		<strong>Option 1</strong>: The brackets can contain an integer value. In the example below, the selector targets only the third &lt;li&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(3)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 2</strong>: The brackets can contain an integer value and the letter "n". The value "3n" means "every third". In the example below, the selector targets every third &lt;li&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(3n)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 3</strong>: The brackets can contain an integer value, the letter "n", a plus (+) symbol and another integer value. In the example below, the selector targets every third &lt;li&gt; child element, starting one number forward (eg. 1st, 4th, 7th, 10th...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(3n+1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 4</strong>: The brackets can contain an integer value, the letter "n", a minus (-) symbol and another integer value. The example below targets every third &lt;li&gt; child element, starting one number backward (eg. 2nd, 5th, 8th...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(3n-1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 5</strong>: The brackets can contain the "even" keyword. The example below targets every "even" &lt;li&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(even)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 6</strong>: The brackets can contain the "odd" keyword. The example below targets every "odd" &lt;li&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-child(odd)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :nth-child pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="23">		:nth-last-child(n)<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :nth-last-child pseudo-class selector is written using an element followed by ":", followed by "nth-last-child", followed by brackets. The brackets can contain six different types of values. Whitespace is not permitted within the selector. 	</p><pre><code><strong>li:nth-last-child(3n)</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :nth-last-child pseudo-class selector targets specific child elements within the parent. The six different types of values used inside the brackets dictate which child elements will be targeted. 	</p>	<p>		<strong>Option 1</strong>: The brackets can contain an integer value. In the example below, the selector targets only the third last &lt;li&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(3)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 2</strong>: The brackets can contain an integer value and the letter "n". The value "3n" means "every third". In the example below, the selector targets every third &lt;li&gt; child element, starting from the last child (eg. 3rd last, 6th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(3n)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 3</strong>: The brackets can contain an integer value, the letter "n", a plus (+) symbol and another integer value. The example below targets every third &lt;li&gt; child element, starting one number backward (eg. last, 4th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(3n+1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 4</strong>: The brackets can contain an integer value, the letter "n", a minus (-) symbol and another integer value. The example below targets every third &lt;li&gt; child element, starting one number forward (eg. 2nd last, 5th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(3n-1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 5</strong>: The brackets can contain the "even" keyword. The example below targets every "even" &lt;li&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(even)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;&lt;/ul&gt;</code></pre> 	<p>		<strong>Option 6</strong>: The brackets can contain the "odd" keyword. The example below targets every "odd" &lt;li&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>li:nth-last-child(odd)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;ul&gt;   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>   &lt;li&gt;Content&lt;/li&gt;   <strong>&lt;li&gt;Content&lt;/li&gt;</strong>&lt;/ul&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :nth-last-child pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="24">		:nth-of-type(n)<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :nth-of-type pseudo-class selector is written using an element followed by ":", followed by "nth-of-type", followed by brackets. The brackets can contain six different types of values. Whitespace is not permitted within the selector. 	</p><pre><code><strong>p:nth-of-type(3)</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :nth-of-type pseudo-class selector targets specific child elements within the parent. The six different types of values used inside the brackets dictate which child elements will be targeted. 	</p>	<p>		<strong>Option 1</strong>: The brackets can contain an integer value. The example below targets only the third &lt;p&gt; element. Other element types will be ignored. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(3)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 2</strong>: The brackets can contain an integer value and the letter "n". The value "3n" means "every third". The example below targets every third &lt;p&gt; child element. Other element types will be ignored. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(3n)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 3</strong>: The brackets can contain an integer value, the letter "n", a plus (+) symbol and another integer value. The example below targets every third &lt;p&gt; child element, starting one number forward (eg. 1st, 4th, 7th, 10th...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(3n+1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>&lt;/div&gt;</code></pre> 	<p>		<strong>Option 4</strong>: The brackets can contain an integer value, the letter "n", a minus (-) symbol and another integer value. The example below targets every third &lt;p&gt; child element, starting one number backward (eg. 2nd, 5th, 8th...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(3n-1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 5</strong>: The brackets can contain the "even" keyword. The example below targets every "even" &lt;p&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(even)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>&lt;/div&gt;</code></pre> 	<p>		<strong>Option 6</strong>: The brackets can contain the "odd" keyword. The example below targets every "odd" &lt;p&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-of-type(odd)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :nth-of-type pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="25">		:nth-last-of-type(n)<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :nth-last-of-type pseudo-class selector is written using an element followed by ":", followed by "nth-last-of-type", followed by brackets. The brackets can contain six different types of values. Whitespace is not permitted within the selector. 	</p><pre><code><strong>p:nth-last-of-type(3)</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :nth-last-of-type pseudo-class selector targets specific child elements within the parent. The six different types of values used inside the brackets dictate which child elements will be targeted. 	</p>	<p>		<strong>Option 1</strong>: The brackets can contain an integer value. The example below targets only the third last &lt;p&gt; child element. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(3)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 2</strong>: The brackets can contain an integer value and the letter "n". The value "3n" means "every third". The example below targets every third last &lt;p&gt; child element, starting from the last child (eg. 3rd last, 6th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(3n)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 3</strong>: The brackets can contain an integer value, the letter "n", a plus (+) symbol and another integer value. The example below targets every third &lt;p&gt; child element, starting one number backward (eg. last, 4th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(3n+1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>&lt;/div&gt;</code></pre> 	<p>		<strong>Option 4</strong>: The brackets can contain an integer value, the letter "n", a minus (-) symbol and another integer value. The example below targets every third &lt;p&gt; child element, starting one number forward (eg. 2nd last, 5th last...). 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(3n-1)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 5</strong>: The brackets can contain the "even" keyword. The example below targets every "even" &lt;p&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(even)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;&lt;/div&gt;</code></pre> 	<p>		<strong>Option 6</strong>: The brackets can contain the "odd" keyword. The example below targets every "odd" &lt;p&gt; child element starting from the end. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:nth-last-of-type(odd)</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;div&gt;&lt;/div&gt;   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   &lt;div&gt;&lt;/div&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>   &lt;p&gt;Content&lt;/p&gt;   <strong>&lt;p&gt;Content&lt;/p&gt;</strong>&lt;/div&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :nth-last-of-type pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="26">		:root<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :root pseudo-class selector is written using a ":", followed by "root". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:root</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :root pseudo-class selector targets the document root element. In HTML documents, the root element is the HTML element. 	</p>	<p>		In the example below, (the &lt;html&gt; element) will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:root</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;html&gt;</strong>   &lt;body&gt;      Content   &lt;/body&gt;<strong>&lt;/html&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :root pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="27">		:empty<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :empty pseudo-class selector is written using an optional element followed by ":", followed by "empty". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:empty</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :empty pseudo-class selector targets elements that have no children (no element, text nodes or even character spaces). 	</p>	<p>		In the example below, only the empty &lt;p&gt; element will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:empty</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   Content&lt;/p&gt;&lt;p&gt;   Content&lt;/p&gt;&lt;p&gt; &lt;/p&gt;<strong>&lt;p&gt;&lt;/p&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :empty pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new group-->	<h1 id="group08">		Group 8 - User interface pseudo-class selectors 	</h1>	<p>		User interface pseudo-classes allow you to style various aspects of form-related elements. 	</p><pre><code><strong>:disabled</strong> { }<strong>:checked</strong> { }<strong>:valid</strong> { }</code></pre> <!-- new selector-->	<h1 class="css3" id="28">		:disabled<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :disabled pseudo-class selector is written using an element followed by ":", followed by "disabled". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:disabled</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :disabled pseudo-class selector targets form elements that use the "disabled" attribute. 	</p>	<p>		In the example below, only the input element that has a "disabled" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:disabled</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;input disabled&gt;</strong>&lt;input&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :disabled pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="29">		:enabled<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :enabled pseudo-class selector is written using an element followed by ":", followed by "enabled". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:enabled</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :enabled pseudo-class selector targets form elements that do not have a "disabled" attribute. 	</p>	<p>		In the example below, the input element that does not have a "disabled" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:enabled</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input disabled&gt;<strong>&lt;input&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :enabled pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="30">		:checked<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :checked pseudo-class selector is written using an element followed by ":", followed by "checked". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:checked</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :checked pseudo-class selector targets form elements (such as radio buttons or checkboxes) that have been "checked" by the user. 	</p>	<h2>		Support 	</h2>	<p>		The :checked pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="31">		:intermediate<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :intermediate pseudo-class selector is written using an optional element followed by ":", followed by "intermediate". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:intermediate</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :intermediate pseudo-class selector targets form elements that are neither checked nor unchecked. 	</p>	<h2>		Support 	</h2>	<p>		The :intermediate pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="32">		:default<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :default pseudo-class selector is written using an element followed by ":", followed by "default". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:default</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :default pseudo-class selector targets form elements that are the default among a set of similar elements. 	</p>	<h2>		Support 	</h2>	<p>		The :default pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="33">		:valid<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :valid pseudo-class selector is written using an optional element followed by ":", followed by "valid". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:valid</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :valid pseudo-class selector targets elements that are determined to be valid (user inputs match the relevant pattern attributes). 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:valid</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input <strong>pattern="[0-9]{2}"</strong>&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :valid pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="34">		:invalid<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :invalid pseudo-class selector is written using an optional element followed by ":", followed by "invalid". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:invalid</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :invalid pseudo-class selector targets form elements that are required but not filled in, or are determined to be invalid (user inputs match the relevant pattern attributes). 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:invalid</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input <strong>pattern="[0-9]{2}"</strong>&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :invalid pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="35">		:in-range<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :in-range pseudo-class selector is written using an element followed by ":", followed by "in-range". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:in-range</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :in-range pseudo-class selector targets form elements with range limitations, where the value is within the defined limitations. 	</p>	<p>		In the example below, the :in-range pseudo-class selector would be applied if the user chooses a number between 1 and 10. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:in-range</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input <strong>min="1" max="10"</strong>&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :in-range pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="36">		:out-of-range<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :out-of-range pseudo-class selector is written using an element followed by ":", followed by "out-of-range". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:out-of-range</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :out-of-range pseudo-class selector targets elements with range limitations, where the value is not within the defined limitations. 	</p>	<p>		In the example below, the :out-of-range pseudo-class selector would be applied if the user chooses a number less than 1 or greater than 10. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:in-range</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input <strong>min="1" max="10"</strong>&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :out-of-range pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="37">		:required<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :required pseudo-class selector is written using an element followed by ":", followed by "required". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:required</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :required pseudo-class selector targets form elements that use the "required" attribute. 	</p>	<p>		In the example below, only the input element that has a "required" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:required</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;input required&gt;</strong>&lt;input&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :required pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="38">		:optional<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :optional pseudo-class selector is written using an element followed by ":", followed by "optional". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:optional</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :optional pseudo-class selector targets form elements that do not use the "required" attribute. 	</p>	<p>		In the example below, only the input element that does not have a "required" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:optional</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input required&gt;<strong>&lt;input&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :optional pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="39">		:read-only<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :read-only pseudo-class selector is written using an element followed by ":", followed by "read-only". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:read-only</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :read-only pseudo-class selector targets form elements that use the "readonly" attribute. 	</p>	<p>		In the example below, only the input element that has a "readonly" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:read-only</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code><strong>&lt;input readonly&gt;</strong>&lt;input &gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :read-only pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="40">		:read-write<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :read-write pseudo-class selector is written using an element followed by ":", followed by "read-write". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:read-write</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :read-write pseudo-class selector targets form elements that can be altered by users and elements that do not use the "readonly" attribute. 	</p>	<p>		In the example below, only the input element that has a "readonly" attribute will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>input:read-write</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;input readonly&gt;<strong>&lt;input&gt;</strong></code></pre> 	<h2>		Support 	</h2>	<p>		The :read-write pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new selector-->	<h1 class="css3" id="41">		:target<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :target pseudo-class selector is written using an optional element followed by ":", followed by "target". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:target</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		Some links point to a location within a web document. These links include the "number sign" (#) followed by an anchor identifier. These links are called "fragment identifiers". 	</p>	<h3>		HTML 	</h3><pre><code>http://abc.com/a.htm<strong>#go</strong></code></pre> 	<p>		Fragment identifiers link to a specific element within a web document, known as the target element. 	</p>	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   &lt;a <strong>href="#one"</strong>&gt;Link&lt;/a&gt;&lt;/p&gt;...&lt;h2 <strong>id="one"</strong>&gt;   Target element&lt;/h2&gt;</code></pre> 	<p>		The :target pseudo-class selector allows us to select these "target elements". 	</p>	<h2>		Support 	</h2>	<p>		The :target pseudo-class selector is not supported by IE6, IE7 or IE8. 	</p><!-- new group-->	<h1 id="group09">		Group 9 - Pseudo-element  selectors 	</h1>	<p>		Pseudo-elements (or "fake" elements) allow you to style elements that are not in the document tree. 	</p><pre><code><strong>p:first-line</strong> { }<strong>p:before</strong> { }<strong>p:after</strong> { }</code></pre> 	<h2>		Single vs double colons 	</h2>	<p>		In CSS1 and CSS2, pseudo-elements were defined using a single ":". In CSS3, pseudo-elements are defined using "::". 	</p>	<h3>		CSS 	</h3><pre><code>p<strong>:</strong>first-line { }p<strong>::</strong>first-line { }</code></pre> 	<p>		The "::" notation was introduced to make a discrimination between pseudo-classes and pseudo-elements. 	</p>	<p>		Most browsers support both variations. However, if you need to support IE6-8, it may be best to continue using ":" notation. 	</p><!-- new selector-->	<h1 class="css1" id="42">		:first-line<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :first-line pseudo-element selector is written using an optional element, followed by ":", followed by "first-line". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:first-line</strong> { }<strong>p:first-line</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :first-line pseudo-element selector targets the first line of the relevant element. 	</p>	<p>		In the example below, the first line of the paragraph will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:first-line</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>This is the first line</strong>   of a paragraph of text&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :first-line pseudo-element selector is buggy in IE6 and IE7. 	</p><!-- new selector-->	<h1 class="css1" id="43">		:first-letter<br>		<span class="css1-bg">CSS1</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :first-letter pseudo-element selector is written using an optional element, followed by ":", followed by "first-letter". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:first-letter</strong> { }<strong>p:first-letter</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :first-line pseudo-element selector targets the first letter of the relevant element. 	</p>	<p>		In the example below, the first letter of the paragraph will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p:first-letter</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>T</strong>his is the first line   of a paragraph of text&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The :first-letter pseudo-element selector is buggy in IE6 and IE7. 	</p><!-- new selector-->	<h1 class="css2" id="44">		:before<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :before pseudo-element selector is written using an optional element, followed by ":", followed by "before". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:before</strong> { }<strong>p:before</strong> { }</code></pre> 	<p>		The :before pseudo-element selector is used in conjunction with the "content" property. 	</p>	<h3>		CSS 	</h3><pre><code>p:before{    <strong>content</strong>: "hello";}</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :before pseudo-element selector is used to generate content. This "generated content" is rendered within the specified element - before the elements real content. 	</p>	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   <strong>[hello]</strong>content&lt;/p&gt;</code></pre> 	<p>		<strong>Option 1</strong>: Generated content can include text. This will place the generated text before the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { <strong>content: "hello";</strong> }</code></pre> 	<p>		<strong>Option 2</strong>: Generated content can include an image. This will place the generated image before the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong>url(a.gif)</strong>; }</code></pre> 	<p>		<strong>Option 3</strong>: Generated content can include an attribute. This will place the value of the attribute as text before the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong>attr(cite)</strong>; }</code></pre> 	<p>		<strong>Option 4</strong>: Generated content can include a counter. This allows authors to change the number order and numbering method of ordered lists. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong>counter(list-order)</strong>; }</code></pre> 	<p>		<strong>Option 5</strong>: Generated content can include nothing. This allows authors to position and style a new generated element. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong>""</strong>; }</code></pre> 	<p>		Generated content can include combinations of any of these options. The example below will render the generated text "class: " and then render any class names applied to the element. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong>"class: " attr(class)</strong>; }</code></pre> 	<p>		Generated content cannot include HTML. 	</p>	<h3>		CSS 	</h3><pre><code>p:before { content: <strong><span class="deleted">&lt;p&gt;test&lt;p&gt;</span></strong>; }</code></pre> 	<h2>		Support 	</h2>	<p>		The :before pseudo-element selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css2" id="45">		:after<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The :after pseudo-element selector is written using an optional element, followed by ":", followed by "after". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>:after</strong> { }<strong>p:after</strong> { }</code></pre> 	<p>		The :after pseudo-element selector is used in conjunction with the "content" property. 	</p>	<h3>		CSS 	</h3><pre><code>p:after{    <strong>content</strong>: "hello";}</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The :after pseudo-element selector is used to generate content. This "generated content" is rendered within the specified element - after the elements real content. 	</p>	<h3>		HTML 	</h3><pre><code>&lt;p&gt;   content<strong>[hello]</strong>&lt;/p&gt;</code></pre> 	<p>		<strong>Option 1</strong>: Generated content can include text. This will place the generated text after the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { <strong>content: "hello";</strong> }</code></pre> 	<p>		<strong>Option 2</strong>: Generated content can include an image. This will place the generated image after the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { content: <strong>url(a.gif)</strong>; }</code></pre> 	<p>		<strong>Option 3</strong>: Generated content can include an attribute. This will place the attribute's value as text after the element's content. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { content: <strong>attr(cite)</strong>; }</code></pre> 	<p>		<strong>Option 4</strong>: Generated content can include nothing. This allows authors to position and style a new generated element. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { content: <strong>""</strong>; }</code></pre> 	<p>		Generated content can include combinations of any of these options. The example below will render the generated text "class: " and then render any class names applied to the element. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { content: <strong>"class: " attr(class)</strong>; }</code></pre> 	<p>		Generated content cannot include HTML. 	</p>	<h3>		CSS 	</h3><pre><code>p:after { content: <strong><span class="deleted">&lt;p&gt;test&lt;p&gt;</span></strong>; }</code></pre> 	<h2>		Support 	</h2>	<p>		The :after pseudo-element selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css3" id="46">		::selection<br>		<span class="css3-bg">CSS3</span> 	</h1>	<p>		The ::selection pseudo-element selector has been dropped from the latest W3C Basic User Interface specification: 	</p>	<blockquote>		<p>			The ::selection pseudo-element selector has been dropped since it was dropped from Selectors after testing found interoperability problems and further details to explore/define. 		</p>		<p>		<a href="http://www.w3.org/TR/css3-ui/">http://www.w3.org/TR/css3-ui/</a> 		</p>	</blockquote><!-- new selector-->	<h1 class="css3" id="47">		::value<br>		<span class="css3-bg">CSS3</span> 	</h1>	<p>		The ::value pseudo-element selector is currently considered "at risk" of bering dropped. 	</p>	<blockquote>		<p>			Note: The ::value, ::choices, ::repeat-item, and ::repeat-index pseudo-elements are all at risk. 		</p>		<p>		<a href="http://www.w3.org/TR/css3-ui/">http://www.w3.org/TR/css3-ui/</a> 		</p>	</blockquote><!-- new selector-->	<h1 class="css3" id="48">		::choices<br>		<span class="css3-bg">CSS3</span> 	</h1>	<p>		The ::choices pseudo-element selector is currently considered "at risk" of bering dropped. 	</p>	<blockquote>		<p>			Note: The ::value, ::choices, ::repeat-item, and ::repeat-index pseudo-elements are all at risk. 		</p>		<p>		<a href="http://www.w3.org/TR/css3-ui/">http://www.w3.org/TR/css3-ui/</a> 		</p>	</blockquote><!-- new selector-->	<h1 class="css3" id="49">		::repeat-item<br>		<span class="css3-bg">CSS3</span> 	</h1>	<p>		The ::repeat-item pseudo-element selector is currently considered "at risk" of bering dropped. 	</p>	<blockquote>		<p>			Note: The ::value, ::choices, ::repeat-item, and ::repeat-index pseudo-elements are all at risk. 		</p>		<p>		<a href="http://www.w3.org/TR/css3-ui/">http://www.w3.org/TR/css3-ui/</a> 		</p>	</blockquote><!-- new selector-->	<h1 class="css3" id="50">		::repeat-index<br>		<span class="css3-bg">CSS3</span> 	</h1>	<p>		The ::repeat-index pseudo-element selector is currently considered "at risk" of bering dropped. 	</p>	<blockquote>		<p>			Note: The ::value, ::choices, ::repeat-item, and ::repeat-index pseudo-elements are all at risk. 		</p>		<p>		<a href="http://www.w3.org/TR/css3-ui/">http://www.w3.org/TR/css3-ui/</a> 		</p>	</blockquote><!-- new group-->	<h1 id="group10">		Group 10 - Attribute selectors 	</h1>	<p>		Attribute selectors are used to select elements based on their attributes or attribute values. 	</p>	<h3>		HTML 	</h3><pre><code>&lt;p <strong>class="intro"</strong>&gt;   Content&lt;/p&gt;</code></pre> <!-- new selector-->	<h1 class="css2" id="51">		[att]<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "]". Whitespace is not permitted within the selector. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att] attribute selector targets any element with the relevant attribute. 	</p>	<p>		In the example below, any &lt;p&gt; element with a class will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p <strong>class</strong>="blue"&gt;   Content&lt;/p&gt;&lt;p <strong>class</strong>="blue red"&gt;   Content&lt;/p&gt;&lt;p <strong>class</strong>="blue-new"&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css2" id="52">		[att=val]<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "=", followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class="blue"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att=val] attribute selector targets any element with the relevant attribute value. 	</p>	<p>		In the example below, any &lt;p&gt; element with a class that has an entire value of "blue" will be selected. Multiple class values and hyphen-separated values that include "blue" will not be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class="blue"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="<strong>blue</strong>"&gt;   Content&lt;/p&gt;&lt;p class="blue red"&gt;   Content&lt;/p&gt;&lt;p class="blue-new"&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att=val] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css2" id="53">		[att~=val]<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att~=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "~", followed by "=", followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class~="blue"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att~=val] attribute selector targets any space-separated instances of a value. 	</p>	<p>		In the example below, any &lt;p&gt; element with a class of "blue", including space separated instances, will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class~="blue"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="<strong>blue</strong>"&gt;   Content&lt;/p&gt;&lt;p class="<strong>blue</strong> red"&gt;   Content&lt;/p&gt;&lt;p class="blue-new"&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att~=val] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css2" id="54">		[att|=val]<br>		<span class="css2-bg">CSS2</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att|=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "|", followed by "=", followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class|="blue"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att|=value] attribute selector targets any hyphen-separated instances of a value. 	</p>	<p>		In the example below, any &lt;p&gt; element with a class of "blue", including hyphen-separated instances, will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>p[class|="blue"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;p class="<strong>blue</strong>"&gt;   Content&lt;/p&gt;&lt;p class="blue red"&gt;   Content&lt;/p&gt;&lt;p class="<strong>blue</strong>-new"&gt;   Content&lt;/p&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att|=val] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css3" id="55">		[att^=val]<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att^=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "^", followed by "=", followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class^="http"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att^=val] attribute selector targets any element whose attribute starts with the value. 	</p>	<p>		In the example below, any &lt;a&gt; element with a class that starts with "http" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class^="http"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;a href="<strong>http</strong>://abc.com"&gt;Link&lt;/a&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att^=val] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css3" id="56">		[att$=val]<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att$=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "$", followed by "=" followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class$="pdf"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att$=val] attribute selector targets any element whose attribute ends with the value. 	</p>	<p>		In the example below, any &lt;a&gt; element with a class that ends with "pdf" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class$="pdf"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;a href="form.<strong>pdf</strong>"&gt;Link&lt;/a&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att$=val] attribute selector is not supported by IE6 or IE7. 	</p><!-- new selector-->	<h1 class="css3" id="57">		[att*=val]<br>		<span class="css3-bg">CSS3</span> 	</h1>	<h2>		Syntax 	</h2>	<p>		The [att*=val] attribute selector is written using an element followed by "[", followed by the relevant attribute, followed by "*", followed by "=" followed by the relevant value (within no quotes, single quotes or double quotes), followed by "]". 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class*="abc.com"]</strong> { }</code></pre> 	<h2>		How does it work? 	</h2>	<p>		The [att*=val] attribute selector target any element whose attribute value matches a string. 	</p>	<p>		In the example below, any &lt;a&gt; element with a class that contains the string of "abc.com" will be selected. 	</p>	<h3>		CSS 	</h3><pre><code><strong>a[class*="abc.com"]</strong> { }</code></pre> 	<h3>		HTML 	</h3><pre><code>&lt;a href="http//<strong>abc.com</strong>"&gt;Link&lt;/a&gt;</code></pre> 	<h2>		Support 	</h2>	<p>		The [att*=val] attribute selector is not supported by IE6 or IE7. 	</p></div></body></html>